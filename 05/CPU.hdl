// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction type
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    // C Instruction - Destination is A register
    And(a=isCInstruction, b=instruction[5], out=ALUShouldOutputToARegister);

    //
    // A Register
    //
    Mux16(a=instruction, b=ALUOut, sel=ALUShouldOutputToARegister, out=ARegisterIn);
    Or(a=isAInstruction, b=ALUShouldOutputToARegister, out=shouldLoadARegister);
    ARegister(in=ARegisterIn, load=shouldLoadARegister, out=ARegisterOut);

    //
    // D Register
    //
    And(a=isCInstruction, b=instruction[4], out=shouldLoadDRegister);
    DRegister(in=ALUOut, load=shouldLoadDRegister, out=DRegisterOut);


    // A or M selection for ALU
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AorMOut);

    //
    // ALU
    //
    ALU(
        x=DRegisterOut,
        y=AorMOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUOut,
        zr=isOutZero,
        ng=isOutNegative
    );

    //
    // PC
    //
    Or(a=isOutNegative, b=isOutZero, out=isOutNegativeOrZero);
    Not(in=isOutNegativeOrZero, out=isOutPositive);

    // Work out should jump
    And(a=isOutNegative, b=instruction[2], out=shouldJumpAndOutIsNegative);
    And(a=isOutZero, b=instruction[1], out=shouldJumpAndOutIsZero);
    And(a=isOutPositive, b=instruction[0], out=shouldJumpAndOutIsPositive);
    Or(a=shouldJumpAndOutIsNegative, b=shouldJumpAndOutIsZero, out=shouldJumpAndOutIsZeroOrNegative);
    Or(a=shouldJumpAndOutIsZeroOrNegative, b=shouldJumpAndOutIsPositive, out=shouldJumpToA);
    
    And(a=isCInstruction, b=shouldJumpToA, out=shouldLoadPC);
    Not(in=shouldLoadPC, out=shouldIncrementPC);
    PC(in=ARegisterOut, load=shouldLoadPC, inc=shouldIncrementPC, reset=reset, out[0..14]=pc);

    //
    // Final Output
    //
    And(a=isCInstruction, b=instruction[3], out=writeM);
    Or16(a=false, b=ARegisterOut, out[0..14]=addressM);
    Or16(a=false, b=ALUOut, out=outM);

}